public abstract class io/outfoxx/swiftpoet/AnyTypeSpec : io/outfoxx/swiftpoet/AttributedSpec {
	public fun <init> (Ljava/lang/String;Ljava/util/List;Ljava/util/Map;)V
	public final fun getName ()Ljava/lang/String;
	public fun getTypeSpecs ()Ljava/util/List;
}

public final class io/outfoxx/swiftpoet/AttributeSpec : io/outfoxx/swiftpoet/Taggable {
	public static final field Companion Lio/outfoxx/swiftpoet/AttributeSpec$Companion;
}

public final class io/outfoxx/swiftpoet/AttributeSpec$Builder : io/outfoxx/swiftpoet/Taggable$Builder {
	public final fun addArgument (Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/AttributeSpec$Builder;
	public final fun addArgument (Ljava/lang/String;)Lio/outfoxx/swiftpoet/AttributeSpec$Builder;
	public final fun addArguments (Ljava/util/List;)Lio/outfoxx/swiftpoet/AttributeSpec$Builder;
	public final fun addArguments ([Ljava/lang/String;)Lio/outfoxx/swiftpoet/AttributeSpec$Builder;
	public final fun build ()Lio/outfoxx/swiftpoet/AttributeSpec;
	public final fun getIdentifier ()Lio/outfoxx/swiftpoet/CodeBlock;
}

public final class io/outfoxx/swiftpoet/AttributeSpec$Companion {
	public final fun available ([Lkotlin/Pair;)Lio/outfoxx/swiftpoet/AttributeSpec;
	public final fun builder (Lio/outfoxx/swiftpoet/DeclaredTypeName;)Lio/outfoxx/swiftpoet/AttributeSpec$Builder;
	public final fun builder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/AttributeSpec$Builder;
	public final fun getDISCARDABLE_RESULT ()Lio/outfoxx/swiftpoet/AttributeSpec;
	public final fun getESCAPING ()Lio/outfoxx/swiftpoet/AttributeSpec;
}

public class io/outfoxx/swiftpoet/AttributedSpec : io/outfoxx/swiftpoet/Taggable {
	public fun <init> (Ljava/util/List;Ljava/util/Map;)V
	public final fun getAttributes ()Ljava/util/List;
}

public abstract class io/outfoxx/swiftpoet/AttributedSpec$Builder : io/outfoxx/swiftpoet/Taggable$Builder {
	public fun <init> ()V
	public final fun addAttribute (Lio/outfoxx/swiftpoet/AttributeSpec;)Lio/outfoxx/swiftpoet/AttributedSpec$Builder;
	public final fun addAttribute (Ljava/lang/String;[Ljava/lang/String;)Lio/outfoxx/swiftpoet/AttributedSpec$Builder;
	public final fun getAttributes ()Ljava/util/List;
}

public final class io/outfoxx/swiftpoet/CodeBlock {
	public static final field Companion Lio/outfoxx/swiftpoet/CodeBlock$Companion;
	public synthetic fun <init> (Ljava/util/List;Ljava/util/List;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static final fun builder ()Lio/outfoxx/swiftpoet/CodeBlock$Builder;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public final fun isEmpty ()Z
	public final fun isNotEmpty ()Z
	public static final fun of (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun toBuilder ()Lio/outfoxx/swiftpoet/CodeBlock$Builder;
	public fun toString ()Ljava/lang/String;
}

public final class io/outfoxx/swiftpoet/CodeBlock$Builder {
	public fun <init> ()V
	public final fun add (Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/CodeBlock$Builder;
	public final fun add (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/CodeBlock$Builder;
	public final fun addNamed (Ljava/lang/String;Ljava/util/Map;)Lio/outfoxx/swiftpoet/CodeBlock$Builder;
	public final fun addStatement (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/CodeBlock$Builder;
	public final fun beginControlFlow (Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/CodeBlock$Builder;
	public final fun build ()Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun endControlFlow (Ljava/lang/String;)Lio/outfoxx/swiftpoet/CodeBlock$Builder;
	public final fun indent ()Lio/outfoxx/swiftpoet/CodeBlock$Builder;
	public final fun isEmpty ()Z
	public final fun isNotEmpty ()Z
	public final fun nextControlFlow (Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/CodeBlock$Builder;
	public static synthetic fun nextControlFlow$default (Lio/outfoxx/swiftpoet/CodeBlock$Builder;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;ILjava/lang/Object;)Lio/outfoxx/swiftpoet/CodeBlock$Builder;
	public final fun unindent ()Lio/outfoxx/swiftpoet/CodeBlock$Builder;
}

public final class io/outfoxx/swiftpoet/CodeBlock$Companion {
	public final fun builder ()Lio/outfoxx/swiftpoet/CodeBlock$Builder;
	public final fun getABSTRACT ()Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun of (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/CodeBlock;
}

public final class io/outfoxx/swiftpoet/CodeBlockKt {
	public static final fun joinToCode (Ljava/util/Collection;)Lio/outfoxx/swiftpoet/CodeBlock;
	public static final fun joinToCode (Ljava/util/Collection;Ljava/lang/CharSequence;)Lio/outfoxx/swiftpoet/CodeBlock;
	public static final fun joinToCode (Ljava/util/Collection;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lio/outfoxx/swiftpoet/CodeBlock;
	public static final fun joinToCode (Ljava/util/Collection;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lio/outfoxx/swiftpoet/CodeBlock;
	public static synthetic fun joinToCode$default (Ljava/util/Collection;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/Object;)Lio/outfoxx/swiftpoet/CodeBlock;
}

public final class io/outfoxx/swiftpoet/ComposedTypeName : io/outfoxx/swiftpoet/TypeName {
	public static final field Companion Lio/outfoxx/swiftpoet/ComposedTypeName$Companion;
	public synthetic fun <init> (Ljava/util/List;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getTypes ()Ljava/util/List;
}

public final class io/outfoxx/swiftpoet/ComposedTypeName$Companion {
	public final fun composed (Ljava/util/List;)Lio/outfoxx/swiftpoet/ComposedTypeName;
	public final fun composed ([Lio/outfoxx/swiftpoet/DeclaredTypeName;)Lio/outfoxx/swiftpoet/ComposedTypeName;
	public final fun composed ([Ljava/lang/String;)Lio/outfoxx/swiftpoet/ComposedTypeName;
}

public final class io/outfoxx/swiftpoet/DeclaredTypeName : io/outfoxx/swiftpoet/TypeName, java/lang/Comparable {
	public static final field Companion Lio/outfoxx/swiftpoet/DeclaredTypeName$Companion;
	public fun <init> (Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V
	public fun compareTo (Lio/outfoxx/swiftpoet/DeclaredTypeName;)I
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public final fun enclosingTypeName (Z)Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static synthetic fun enclosingTypeName$default (Lio/outfoxx/swiftpoet/DeclaredTypeName;ZILjava/lang/Object;)Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public final fun getAlwaysQualify ()Z
	public final fun getCanonicalName ()Ljava/lang/String;
	public final fun getCompoundName ()Ljava/lang/String;
	public final fun getModuleName ()Ljava/lang/String;
	public final fun getSimpleName ()Ljava/lang/String;
	public final fun getSimpleNames ()Ljava/util/List;
	public final fun nestedType (Ljava/lang/String;Z)Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public final fun nestedType (Ljava/util/List;Z)Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static synthetic fun nestedType$default (Lio/outfoxx/swiftpoet/DeclaredTypeName;Ljava/lang/String;ZILjava/lang/Object;)Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static synthetic fun nestedType$default (Lio/outfoxx/swiftpoet/DeclaredTypeName;Ljava/util/List;ZILjava/lang/Object;)Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public final fun peerType (Ljava/lang/String;Z)Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static synthetic fun peerType$default (Lio/outfoxx/swiftpoet/DeclaredTypeName;Ljava/lang/String;ZILjava/lang/Object;)Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final fun qualifiedTypeName (Ljava/lang/String;)Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public final fun topLevelTypeName (Z)Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static synthetic fun topLevelTypeName$default (Lio/outfoxx/swiftpoet/DeclaredTypeName;ZILjava/lang/Object;)Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final fun typeName (Ljava/lang/String;Z)Lio/outfoxx/swiftpoet/DeclaredTypeName;
}

public final class io/outfoxx/swiftpoet/DeclaredTypeName$Companion {
	public final fun qualifiedTypeName (Ljava/lang/String;)Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public final fun typeName (Ljava/lang/String;Z)Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static synthetic fun typeName$default (Lio/outfoxx/swiftpoet/DeclaredTypeName$Companion;Ljava/lang/String;ZILjava/lang/Object;)Lio/outfoxx/swiftpoet/DeclaredTypeName;
}

public final class io/outfoxx/swiftpoet/DeclaredTypeNameKt {
	public static final field ANY Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field ANY_CLASS Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field ANY_OBJECT Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field ARRAY Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field BOOL Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field CASE_ITERABLE Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field CODABLE Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field DATA Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field DICTIONARY Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field DOUBLE Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field EQUATABLE Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field FLOAT Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field FLOAT32 Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field FLOAT64 Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field FLOAT80 Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field IMPLICIT Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field INT Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field INT16 Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field INT32 Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field INT64 Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field INT8 Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field OPTIONAL Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field SENDABLE Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field SET Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field STRING Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field UINT16 Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field UINT32 Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field UINT64 Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field UINT8 Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public static final field VOID Lio/outfoxx/swiftpoet/DeclaredTypeName;
}

public final class io/outfoxx/swiftpoet/EnumerationCaseSpec : io/outfoxx/swiftpoet/AttributedSpec {
	public static final field Companion Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Companion;
	public synthetic fun <init> (Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Builder;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static final fun builder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Builder;
	public static final fun builder (Ljava/lang/String;I)Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Builder;
	public static final fun builder (Ljava/lang/String;Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Builder;
	public static final fun builder (Ljava/lang/String;Lio/outfoxx/swiftpoet/TupleTypeName;)Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Builder;
	public static final fun builder (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Builder;
	public static final fun builder (Ljava/lang/String;Ljava/lang/String;)Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Builder;
	public final fun getDoc ()Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun getName ()Ljava/lang/String;
	public final fun getTypeOrConstant ()Ljava/lang/Object;
	public final fun toBuilder ()Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Builder;
}

public final class io/outfoxx/swiftpoet/EnumerationCaseSpec$Builder : io/outfoxx/swiftpoet/AttributedSpec$Builder {
	public final fun addDoc (Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Builder;
	public final fun addDoc (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Builder;
	public final fun build ()Lio/outfoxx/swiftpoet/EnumerationCaseSpec;
}

public final class io/outfoxx/swiftpoet/EnumerationCaseSpec$Companion {
	public final fun builder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Builder;
	public final fun builder (Ljava/lang/String;I)Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Builder;
	public final fun builder (Ljava/lang/String;Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Builder;
	public final fun builder (Ljava/lang/String;Lio/outfoxx/swiftpoet/TupleTypeName;)Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Builder;
	public final fun builder (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Builder;
	public final fun builder (Ljava/lang/String;Ljava/lang/String;)Lio/outfoxx/swiftpoet/EnumerationCaseSpec$Builder;
}

public final class io/outfoxx/swiftpoet/ExtensionSpec : io/outfoxx/swiftpoet/Taggable {
	public static final field Companion Lio/outfoxx/swiftpoet/ExtensionSpec$Companion;
	public synthetic fun <init> (Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static final fun builder (Lio/outfoxx/swiftpoet/AnyTypeSpec;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public static final fun builder (Lio/outfoxx/swiftpoet/DeclaredTypeName;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getConditionalConstraints ()Ljava/util/List;
	public final fun getDoc ()Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun getExtendedTypeOrName ()Ljava/lang/Object;
	public final fun getFunSpecs ()Ljava/util/List;
	public final fun getModifiers ()Ljava/util/Set;
	public final fun getPropertySpecs ()Ljava/util/List;
	public final fun getSuperTypes ()Ljava/util/Set;
	public final fun getTypeSpecs ()Ljava/util/List;
	public fun hashCode ()I
	public final fun toBuilder ()Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public fun toString ()Ljava/lang/String;
}

public final class io/outfoxx/swiftpoet/ExtensionSpec$Builder : io/outfoxx/swiftpoet/Taggable$Builder {
	public final fun addConditionalConstraint (Lio/outfoxx/swiftpoet/TypeVariableName;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public final fun addConditionalConstraints (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public final fun addDoc (Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public final fun addDoc (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public final fun addFunction (Lio/outfoxx/swiftpoet/FunctionSpec;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public final fun addFunctions (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public final fun addModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public final fun addProperties (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public final fun addProperty (Lio/outfoxx/swiftpoet/PropertySpec;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public final fun addProperty (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public final fun addSuperType (Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public final fun addType (Lio/outfoxx/swiftpoet/AnyTypeSpec;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public final fun addTypes (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public final fun build ()Lio/outfoxx/swiftpoet/ExtensionSpec;
}

public final class io/outfoxx/swiftpoet/ExtensionSpec$Companion {
	public final fun builder (Lio/outfoxx/swiftpoet/AnyTypeSpec;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
	public final fun builder (Lio/outfoxx/swiftpoet/DeclaredTypeName;)Lio/outfoxx/swiftpoet/ExtensionSpec$Builder;
}

public final class io/outfoxx/swiftpoet/ExternalTypeSpec : io/outfoxx/swiftpoet/AnyTypeSpec {
	public fun <init> (Ljava/lang/String;)V
}

public final class io/outfoxx/swiftpoet/FileMemberSpec : io/outfoxx/swiftpoet/Taggable {
	public static final field Companion Lio/outfoxx/swiftpoet/FileMemberSpec$Companion;
	public static final fun builder (Lio/outfoxx/swiftpoet/AnyTypeSpec;)Lio/outfoxx/swiftpoet/FileMemberSpec$Builder;
	public static final fun builder (Lio/outfoxx/swiftpoet/ExtensionSpec;)Lio/outfoxx/swiftpoet/FileMemberSpec$Builder;
	public static final fun builder (Lio/outfoxx/swiftpoet/FunctionSpec;)Lio/outfoxx/swiftpoet/FileMemberSpec$Builder;
	public static final fun builder (Lio/outfoxx/swiftpoet/PropertySpec;)Lio/outfoxx/swiftpoet/FileMemberSpec$Builder;
	public final fun getDoc ()Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun getGuardTest ()Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun getMember ()Ljava/lang/Object;
}

public final class io/outfoxx/swiftpoet/FileMemberSpec$Builder : io/outfoxx/swiftpoet/Taggable$Builder {
	public final fun addDoc (Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/FileMemberSpec$Builder;
	public final fun addDoc (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/FileMemberSpec$Builder;
	public final fun addGuard (Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/FileMemberSpec$Builder;
	public final fun addGuard (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/FileMemberSpec$Builder;
	public final fun build ()Lio/outfoxx/swiftpoet/FileMemberSpec;
}

public final class io/outfoxx/swiftpoet/FileMemberSpec$Companion {
	public final fun builder (Lio/outfoxx/swiftpoet/AnyTypeSpec;)Lio/outfoxx/swiftpoet/FileMemberSpec$Builder;
	public final fun builder (Lio/outfoxx/swiftpoet/ExtensionSpec;)Lio/outfoxx/swiftpoet/FileMemberSpec$Builder;
	public final fun builder (Lio/outfoxx/swiftpoet/FunctionSpec;)Lio/outfoxx/swiftpoet/FileMemberSpec$Builder;
	public final fun builder (Lio/outfoxx/swiftpoet/PropertySpec;)Lio/outfoxx/swiftpoet/FileMemberSpec$Builder;
}

public final class io/outfoxx/swiftpoet/FileSpec : io/outfoxx/swiftpoet/Taggable {
	public static final field Companion Lio/outfoxx/swiftpoet/FileSpec$Companion;
	public synthetic fun <init> (Lio/outfoxx/swiftpoet/FileSpec$Builder;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static final fun builder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/FileSpec$Builder;
	public static final fun builder (Ljava/lang/String;Ljava/lang/String;)Lio/outfoxx/swiftpoet/FileSpec$Builder;
	public fun equals (Ljava/lang/Object;)Z
	public static final fun get (Ljava/lang/String;Lio/outfoxx/swiftpoet/AnyTypeSpec;)Lio/outfoxx/swiftpoet/FileSpec;
	public final fun getComment ()Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun getMembers ()Ljava/util/List;
	public final fun getModuleName ()Ljava/lang/String;
	public final fun getName ()Ljava/lang/String;
	public fun hashCode ()I
	public final fun toBuilder ()Lio/outfoxx/swiftpoet/FileSpec$Builder;
	public fun toString ()Ljava/lang/String;
	public final fun writeTo (Ljava/io/File;)V
	public final fun writeTo (Ljava/lang/Appendable;)V
	public final fun writeTo (Ljava/nio/file/Path;)V
}

public final class io/outfoxx/swiftpoet/FileSpec$Builder : io/outfoxx/swiftpoet/Taggable$Builder {
	public final fun addComment (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/FileSpec$Builder;
	public final fun addExtension (Lio/outfoxx/swiftpoet/ExtensionSpec;)Lio/outfoxx/swiftpoet/FileSpec$Builder;
	public final fun addFunction (Lio/outfoxx/swiftpoet/FunctionSpec;)Lio/outfoxx/swiftpoet/FileSpec$Builder;
	public final fun addImport (Lio/outfoxx/swiftpoet/ImportSpec;)Lio/outfoxx/swiftpoet/FileSpec$Builder;
	public final fun addImport (Ljava/lang/String;[Lio/outfoxx/swiftpoet/AttributeSpec;)Lio/outfoxx/swiftpoet/FileSpec$Builder;
	public final fun addMember (Lio/outfoxx/swiftpoet/FileMemberSpec;)Lio/outfoxx/swiftpoet/FileSpec$Builder;
	public final fun addProperty (Lio/outfoxx/swiftpoet/PropertySpec;)Lio/outfoxx/swiftpoet/FileSpec$Builder;
	public final fun addType (Lio/outfoxx/swiftpoet/AnyTypeSpec;)Lio/outfoxx/swiftpoet/FileSpec$Builder;
	public final fun build ()Lio/outfoxx/swiftpoet/FileSpec;
	public final fun getModuleName ()Ljava/lang/String;
	public final fun getName ()Ljava/lang/String;
	public final fun indent (Ljava/lang/String;)Lio/outfoxx/swiftpoet/FileSpec$Builder;
}

public final class io/outfoxx/swiftpoet/FileSpec$Companion {
	public final fun builder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/FileSpec$Builder;
	public final fun builder (Ljava/lang/String;Ljava/lang/String;)Lio/outfoxx/swiftpoet/FileSpec$Builder;
	public final fun get (Ljava/lang/String;Lio/outfoxx/swiftpoet/AnyTypeSpec;)Lio/outfoxx/swiftpoet/FileSpec;
}

public final class io/outfoxx/swiftpoet/FunctionSignatureSpec {
	public static final field Companion Lio/outfoxx/swiftpoet/FunctionSignatureSpec$Companion;
	public fun <init> (Lio/outfoxx/swiftpoet/FunctionSignatureSpec$Builder;)V
	public static final fun builder ()Lio/outfoxx/swiftpoet/FunctionSignatureSpec$Builder;
	public final fun getAsync ()Z
	public final fun getFailable ()Z
	public final fun getParameters ()Ljava/util/List;
	public final fun getReturnType ()Lio/outfoxx/swiftpoet/TypeName;
	public final fun getThrows ()Z
	public final fun getTypeVariables ()Ljava/util/List;
	public final fun toBuilder ()Lio/outfoxx/swiftpoet/FunctionSignatureSpec$Builder;
}

public final class io/outfoxx/swiftpoet/FunctionSignatureSpec$Builder : io/outfoxx/swiftpoet/AttributedSpec$Builder {
	public final fun addCode (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/FunctionSignatureSpec$Builder;
	public final fun addParameter (Lio/outfoxx/swiftpoet/ParameterSpec;)Lio/outfoxx/swiftpoet/FunctionSignatureSpec$Builder;
	public final fun addParameter (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/FunctionSignatureSpec$Builder;
	public final fun addParameter (Ljava/lang/String;Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/FunctionSignatureSpec$Builder;
	public final fun addParameters (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/FunctionSignatureSpec$Builder;
	public final fun addTypeVariable (Lio/outfoxx/swiftpoet/TypeVariableName;)Lio/outfoxx/swiftpoet/FunctionSignatureSpec$Builder;
	public final fun addTypeVariables (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/FunctionSignatureSpec$Builder;
	public final fun async (Z)Lio/outfoxx/swiftpoet/FunctionSignatureSpec$Builder;
	public final fun build ()Lio/outfoxx/swiftpoet/FunctionSignatureSpec;
	public final fun failable (Z)Lio/outfoxx/swiftpoet/FunctionSignatureSpec$Builder;
	public final fun returns (Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/FunctionSignatureSpec$Builder;
	public final fun throws (Z)Lio/outfoxx/swiftpoet/FunctionSignatureSpec$Builder;
}

public final class io/outfoxx/swiftpoet/FunctionSignatureSpec$Companion {
	public final fun builder ()Lio/outfoxx/swiftpoet/FunctionSignatureSpec$Builder;
}

public final class io/outfoxx/swiftpoet/FunctionSpec : io/outfoxx/swiftpoet/AttributedSpec {
	public static final field Companion Lio/outfoxx/swiftpoet/FunctionSpec$Companion;
	public synthetic fun <init> (Lio/outfoxx/swiftpoet/FunctionSpec$Builder;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static final fun abstractBuilder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public static final fun builder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public static final fun constructorBuilder ()Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public static final fun deinitializerBuilder ()Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public static final fun didSetBuilder ()Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAsync ()Z
	public final fun getBody ()Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun getDoc ()Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun getFailable ()Z
	public final fun getLocalTypeSpecs ()Ljava/util/List;
	public final fun getModifiers ()Ljava/util/Set;
	public final fun getName ()Ljava/lang/String;
	public final fun getParameters ()Ljava/util/List;
	public final fun getReturnType ()Lio/outfoxx/swiftpoet/TypeName;
	public final fun getSignature ()Lio/outfoxx/swiftpoet/FunctionSignatureSpec;
	public final fun getThrows ()Z
	public final fun getTypeVariables ()Ljava/util/List;
	public static final fun getterBuilder ()Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public fun hashCode ()I
	public final fun isAccessor ()Z
	public final fun isConstructor ()Z
	public final fun isDeinitializer ()Z
	public final fun isObserver ()Z
	public static final fun operatorBuilder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public static final fun setterBuilder ()Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun toBuilder ()Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public fun toString ()Ljava/lang/String;
	public static final fun willSetBuilder ()Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
}

public final class io/outfoxx/swiftpoet/FunctionSpec$Builder : io/outfoxx/swiftpoet/AttributedSpec$Builder {
	public final fun abstract (Z)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addCode (Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addCode (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addComment (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addDoc (Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addDoc (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addLocalType (Lio/outfoxx/swiftpoet/AnyTypeSpec;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addLocalTypes (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addModifiers (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addNamedCode (Ljava/lang/String;Ljava/util/Map;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addParameter (Lio/outfoxx/swiftpoet/ParameterSpec;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addParameter (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addParameter (Ljava/lang/String;Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addParameters (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addStatement (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addTypeVariable (Lio/outfoxx/swiftpoet/TypeVariableName;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun addTypeVariables (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun async (Z)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun beginControlFlow (Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun build ()Lio/outfoxx/swiftpoet/FunctionSpec;
	public final fun endControlFlow (Ljava/lang/String;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun failable (Z)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun nextControlFlow (Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun returns (Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun throws (Z)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
}

public final class io/outfoxx/swiftpoet/FunctionSpec$Companion {
	public final fun abstractBuilder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun builder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun constructorBuilder ()Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun deinitializerBuilder ()Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun didSetBuilder ()Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun getterBuilder ()Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun operatorBuilder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun setterBuilder ()Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
	public final fun willSetBuilder ()Lio/outfoxx/swiftpoet/FunctionSpec$Builder;
}

public final class io/outfoxx/swiftpoet/FunctionTypeName : io/outfoxx/swiftpoet/TypeName {
	public static final field Companion Lio/outfoxx/swiftpoet/FunctionTypeName$Companion;
	public fun <init> ()V
	public static final fun get (Ljava/util/List;Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/FunctionTypeName;
	public static final fun get ([Lio/outfoxx/swiftpoet/ParameterSpec;Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/FunctionTypeName;
	public static final fun get ([Lio/outfoxx/swiftpoet/TypeName;Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/FunctionTypeName;
	public final fun getParameters ()Ljava/util/List;
	public final fun getReturnType ()Lio/outfoxx/swiftpoet/TypeName;
}

public final class io/outfoxx/swiftpoet/FunctionTypeName$Companion {
	public final fun get (Ljava/util/List;Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/FunctionTypeName;
	public final fun get ([Lio/outfoxx/swiftpoet/ParameterSpec;Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/FunctionTypeName;
	public final fun get ([Lio/outfoxx/swiftpoet/TypeName;Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/FunctionTypeName;
	public static synthetic fun get$default (Lio/outfoxx/swiftpoet/FunctionTypeName$Companion;Ljava/util/List;Lio/outfoxx/swiftpoet/TypeName;ILjava/lang/Object;)Lio/outfoxx/swiftpoet/FunctionTypeName;
	public static synthetic fun get$default (Lio/outfoxx/swiftpoet/FunctionTypeName$Companion;[Lio/outfoxx/swiftpoet/ParameterSpec;Lio/outfoxx/swiftpoet/TypeName;ILjava/lang/Object;)Lio/outfoxx/swiftpoet/FunctionTypeName;
	public static synthetic fun get$default (Lio/outfoxx/swiftpoet/FunctionTypeName$Companion;[Lio/outfoxx/swiftpoet/TypeName;Lio/outfoxx/swiftpoet/TypeName;ILjava/lang/Object;)Lio/outfoxx/swiftpoet/FunctionTypeName;
}

public final class io/outfoxx/swiftpoet/GenericQualifiedTypeName : io/outfoxx/swiftpoet/TypeName {
	public static final field Companion Lio/outfoxx/swiftpoet/GenericQualifiedTypeName$Companion;
	public final fun getQualifier ()Lio/outfoxx/swiftpoet/GenericQualifier;
	public final fun getType ()Lio/outfoxx/swiftpoet/TypeName;
}

public final class io/outfoxx/swiftpoet/GenericQualifiedTypeName$Companion {
	public final fun any (Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/GenericQualifiedTypeName;
	public final fun of (Lio/outfoxx/swiftpoet/TypeName;Lio/outfoxx/swiftpoet/GenericQualifier;)Lio/outfoxx/swiftpoet/GenericQualifiedTypeName;
	public final fun some (Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/GenericQualifiedTypeName;
}

public final class io/outfoxx/swiftpoet/GenericQualifier : java/lang/Enum {
	public static final field ANY Lio/outfoxx/swiftpoet/GenericQualifier;
	public static final field SOME Lio/outfoxx/swiftpoet/GenericQualifier;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/outfoxx/swiftpoet/GenericQualifier;
	public static fun values ()[Lio/outfoxx/swiftpoet/GenericQualifier;
}

public final class io/outfoxx/swiftpoet/ImportSpec : io/outfoxx/swiftpoet/AttributedSpec, java/lang/Comparable {
	public static final field Companion Lio/outfoxx/swiftpoet/ImportSpec$Companion;
	public static final fun builder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/ImportSpec$Builder;
	public fun compareTo (Lio/outfoxx/swiftpoet/ImportSpec;)I
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public final fun getDoc ()Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun getGuardTest ()Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun getName ()Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public final class io/outfoxx/swiftpoet/ImportSpec$Builder : io/outfoxx/swiftpoet/AttributedSpec$Builder {
	public final fun addDoc (Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/ImportSpec$Builder;
	public final fun addDoc (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/ImportSpec$Builder;
	public final fun addGuard (Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/ImportSpec$Builder;
	public final fun addGuard (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/ImportSpec$Builder;
	public final fun build ()Lio/outfoxx/swiftpoet/ImportSpec;
}

public final class io/outfoxx/swiftpoet/ImportSpec$Companion {
	public final fun builder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/ImportSpec$Builder;
}

public final class io/outfoxx/swiftpoet/Modifier : java/lang/Enum {
	public static final field CLASS Lio/outfoxx/swiftpoet/Modifier;
	public static final field CONVENIENCE Lio/outfoxx/swiftpoet/Modifier;
	public static final field FILEPRIVATE Lio/outfoxx/swiftpoet/Modifier;
	public static final field FINAL Lio/outfoxx/swiftpoet/Modifier;
	public static final field INOUT Lio/outfoxx/swiftpoet/Modifier;
	public static final field INTERNAL Lio/outfoxx/swiftpoet/Modifier;
	public static final field LAZY Lio/outfoxx/swiftpoet/Modifier;
	public static final field MUTATING Lio/outfoxx/swiftpoet/Modifier;
	public static final field NONMUTATING Lio/outfoxx/swiftpoet/Modifier;
	public static final field OPEN Lio/outfoxx/swiftpoet/Modifier;
	public static final field OVERRIDE Lio/outfoxx/swiftpoet/Modifier;
	public static final field PRIVATE Lio/outfoxx/swiftpoet/Modifier;
	public static final field PUBLIC Lio/outfoxx/swiftpoet/Modifier;
	public static final field REQUIRED Lio/outfoxx/swiftpoet/Modifier;
	public static final field STATIC Lio/outfoxx/swiftpoet/Modifier;
	public static final field UNOWNED Lio/outfoxx/swiftpoet/Modifier;
	public static final field WEAK Lio/outfoxx/swiftpoet/Modifier;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/outfoxx/swiftpoet/Modifier;
	public static fun values ()[Lio/outfoxx/swiftpoet/Modifier;
}

public final class io/outfoxx/swiftpoet/NameAllocator {
	public fun <init> ()V
	public final fun copy ()Lio/outfoxx/swiftpoet/NameAllocator;
	public final fun get (Ljava/lang/Object;)Ljava/lang/String;
	public final fun newName (Ljava/lang/String;)Ljava/lang/String;
	public final fun newName (Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;
	public static synthetic fun newName$default (Lio/outfoxx/swiftpoet/NameAllocator;Ljava/lang/String;Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/String;
}

public final class io/outfoxx/swiftpoet/ParameterSpec : io/outfoxx/swiftpoet/AttributedSpec {
	public static final field Companion Lio/outfoxx/swiftpoet/ParameterSpec$Companion;
	public synthetic fun <init> (Lio/outfoxx/swiftpoet/ParameterSpec$Builder;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static final fun builder (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/ParameterSpec$Builder;
	public static final fun builder (Ljava/lang/String;Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/ParameterSpec$Builder;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getArgumentLabel ()Ljava/lang/String;
	public final fun getDefaultValue ()Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun getModifiers ()Ljava/util/Set;
	public final fun getParameterName ()Ljava/lang/String;
	public final fun getType ()Lio/outfoxx/swiftpoet/TypeName;
	public final fun getVariadic ()Z
	public fun hashCode ()I
	public final fun toBuilder (Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/ParameterSpec$Builder;
	public final fun toBuilder (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/ParameterSpec$Builder;
	public final fun toBuilder (Ljava/lang/String;Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/ParameterSpec$Builder;
	public fun toString ()Ljava/lang/String;
	public static final fun unnamed (Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/ParameterSpec;
}

public final class io/outfoxx/swiftpoet/ParameterSpec$Builder : io/outfoxx/swiftpoet/AttributedSpec$Builder {
	public final fun addModifiers (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/ParameterSpec$Builder;
	public final fun addModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/ParameterSpec$Builder;
	public final fun build ()Lio/outfoxx/swiftpoet/ParameterSpec;
	public final fun defaultValue (Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/ParameterSpec$Builder;
	public final fun defaultValue (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/ParameterSpec$Builder;
	public final fun variadic (Z)Lio/outfoxx/swiftpoet/ParameterSpec$Builder;
}

public final class io/outfoxx/swiftpoet/ParameterSpec$Companion {
	public final fun builder (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/ParameterSpec$Builder;
	public final fun builder (Ljava/lang/String;Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/ParameterSpec$Builder;
	public final fun unnamed (Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/ParameterSpec;
}

public final class io/outfoxx/swiftpoet/ParameterizedTypeName : io/outfoxx/swiftpoet/TypeName {
	public static final field Companion Lio/outfoxx/swiftpoet/ParameterizedTypeName$Companion;
	public fun getImplicit ()Z
	public fun getOptional ()Z
	public final fun getRawType ()Lio/outfoxx/swiftpoet/DeclaredTypeName;
	public final fun getTypeArguments ()Ljava/util/List;
	public fun makeImplicit ()Lio/outfoxx/swiftpoet/ParameterizedTypeName;
	public fun makeNonImplicit ()Lio/outfoxx/swiftpoet/TypeName;
	public fun makeNonOptional ()Lio/outfoxx/swiftpoet/TypeName;
	public fun makeOptional ()Lio/outfoxx/swiftpoet/ParameterizedTypeName;
	public final fun nestedType (Ljava/lang/String;Ljava/util/List;)Lio/outfoxx/swiftpoet/ParameterizedTypeName;
	public fun unwrapOptional ()Lio/outfoxx/swiftpoet/TypeName;
}

public final class io/outfoxx/swiftpoet/ParameterizedTypeName$Companion {
}

public final class io/outfoxx/swiftpoet/ParameterizedTypeNameKt {
	public static final fun parameterizedBy (Lio/outfoxx/swiftpoet/DeclaredTypeName;[Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/ParameterizedTypeName;
}

public final class io/outfoxx/swiftpoet/PropertySpec : io/outfoxx/swiftpoet/AttributedSpec {
	public static final field Companion Lio/outfoxx/swiftpoet/PropertySpec$Companion;
	public synthetic fun <init> (Lio/outfoxx/swiftpoet/PropertySpec$Builder;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static final fun abstractBuilder (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public static final fun builder (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDidSet ()Lio/outfoxx/swiftpoet/FunctionSpec;
	public final fun getDoc ()Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun getGetter ()Lio/outfoxx/swiftpoet/FunctionSpec;
	public final fun getInitializer ()Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun getModifiers ()Ljava/util/Set;
	public final fun getMutable ()Z
	public final fun getMutableVisibility ()Lio/outfoxx/swiftpoet/Modifier;
	public final fun getName ()Ljava/lang/String;
	public final fun getSetter ()Lio/outfoxx/swiftpoet/FunctionSpec;
	public final fun getSimpleSpec ()Lkotlin/Pair;
	public final fun getSubscriptSpec ()Lio/outfoxx/swiftpoet/FunctionSignatureSpec;
	public final fun getType ()Lio/outfoxx/swiftpoet/TypeName;
	public final fun getWillSet ()Lio/outfoxx/swiftpoet/FunctionSpec;
	public fun hashCode ()I
	public static final fun subscriptBuilder (Lio/outfoxx/swiftpoet/FunctionSignatureSpec;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public final fun toBuilder ()Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public fun toString ()Ljava/lang/String;
	public static final fun varBuilder (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
}

public final class io/outfoxx/swiftpoet/PropertySpec$Builder : io/outfoxx/swiftpoet/AttributedSpec$Builder {
	public final fun abstractGetter ()Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public final fun abstractSetter ()Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public final fun addDoc (Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public final fun addDoc (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public final fun addModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public final fun build ()Lio/outfoxx/swiftpoet/PropertySpec;
	public final fun didSet (Lio/outfoxx/swiftpoet/FunctionSpec;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public final fun getter (Lio/outfoxx/swiftpoet/FunctionSpec;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public final fun initializer (Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public final fun initializer (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public final fun mutable (Z)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public final fun mutableVisibility (Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public final fun setter (Lio/outfoxx/swiftpoet/FunctionSpec;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public final fun willSet (Lio/outfoxx/swiftpoet/FunctionSpec;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
}

public final class io/outfoxx/swiftpoet/PropertySpec$Companion {
	public final fun abstractBuilder (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public final fun builder (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public final fun subscriptBuilder (Lio/outfoxx/swiftpoet/FunctionSignatureSpec;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
	public final fun varBuilder (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/PropertySpec$Builder;
}

public final class io/outfoxx/swiftpoet/SelfTypeName : io/outfoxx/swiftpoet/TypeName {
	public static final field Companion Lio/outfoxx/swiftpoet/SelfTypeName$Companion;
}

public final class io/outfoxx/swiftpoet/SelfTypeName$Companion {
	public final fun getINSTANCE ()Lio/outfoxx/swiftpoet/SelfTypeName;
}

public abstract class io/outfoxx/swiftpoet/Taggable {
	public fun <init> (Ljava/util/Map;)V
	public final fun getTags ()Ljava/util/Map;
}

public abstract class io/outfoxx/swiftpoet/Taggable$Builder {
	public fun <init> ()V
	public final fun getTags ()Ljava/util/Map;
	public final fun tag (Ljava/lang/Class;Ljava/lang/Object;)Lio/outfoxx/swiftpoet/Taggable$Builder;
	public final fun tag (Lkotlin/reflect/KClass;Ljava/lang/Object;)Lio/outfoxx/swiftpoet/Taggable$Builder;
}

public final class io/outfoxx/swiftpoet/TupleTypeName : io/outfoxx/swiftpoet/TypeName {
	public static final field Companion Lio/outfoxx/swiftpoet/TupleTypeName$Companion;
}

public final class io/outfoxx/swiftpoet/TupleTypeName$Companion {
	public final fun from ([Lkotlin/Pair;)Lio/outfoxx/swiftpoet/TupleTypeName;
	public final fun of ([Lkotlin/Pair;)Lio/outfoxx/swiftpoet/TupleTypeName;
}

public final class io/outfoxx/swiftpoet/TypeAliasSpec : io/outfoxx/swiftpoet/AnyTypeSpec {
	public static final field Companion Lio/outfoxx/swiftpoet/TypeAliasSpec$Companion;
	public synthetic fun <init> (Lio/outfoxx/swiftpoet/TypeAliasSpec$Builder;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static final fun builder (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/TypeAliasSpec$Builder;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDoc ()Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun getModifiers ()Ljava/util/Set;
	public final fun getType ()Lio/outfoxx/swiftpoet/TypeName;
	public final fun getTypeVariables ()Ljava/util/List;
	public fun hashCode ()I
	public final fun toBuilder ()Lio/outfoxx/swiftpoet/TypeAliasSpec$Builder;
	public fun toString ()Ljava/lang/String;
}

public final class io/outfoxx/swiftpoet/TypeAliasSpec$Builder : io/outfoxx/swiftpoet/AttributedSpec$Builder {
	public final fun addDoc (Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/TypeAliasSpec$Builder;
	public final fun addDoc (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/TypeAliasSpec$Builder;
	public final fun addModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/TypeAliasSpec$Builder;
	public final fun addTypeVariable (Lio/outfoxx/swiftpoet/TypeVariableName;)Lio/outfoxx/swiftpoet/TypeAliasSpec$Builder;
	public final fun addTypeVariables (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/TypeAliasSpec$Builder;
	public final fun build ()Lio/outfoxx/swiftpoet/TypeAliasSpec;
}

public final class io/outfoxx/swiftpoet/TypeAliasSpec$Companion {
	public final fun builder (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/TypeAliasSpec$Builder;
}

public abstract class io/outfoxx/swiftpoet/TypeName {
	public fun equals (Ljava/lang/Object;)Z
	public fun getImplicit ()Z
	public fun getName ()Ljava/lang/String;
	public fun getOptional ()Z
	public fun hashCode ()I
	public fun makeImplicit ()Lio/outfoxx/swiftpoet/ParameterizedTypeName;
	public fun makeNonImplicit ()Lio/outfoxx/swiftpoet/TypeName;
	public fun makeNonOptional ()Lio/outfoxx/swiftpoet/TypeName;
	public fun makeOptional ()Lio/outfoxx/swiftpoet/ParameterizedTypeName;
	public fun qualify (Lio/outfoxx/swiftpoet/GenericQualifier;)Lio/outfoxx/swiftpoet/GenericQualifiedTypeName;
	public fun toString ()Ljava/lang/String;
	public fun unwrapOptional ()Lio/outfoxx/swiftpoet/TypeName;
	public fun wrapOptional ()Lio/outfoxx/swiftpoet/ParameterizedTypeName;
}

public final class io/outfoxx/swiftpoet/TypeSpec : io/outfoxx/swiftpoet/AnyTypeSpec {
	public static final field Companion Lio/outfoxx/swiftpoet/TypeSpec$Companion;
	public synthetic fun <init> (Lio/outfoxx/swiftpoet/TypeSpec$Builder;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static final fun actorBuilder (Lio/outfoxx/swiftpoet/DeclaredTypeName;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public static final fun actorBuilder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public static final fun classBuilder (Lio/outfoxx/swiftpoet/DeclaredTypeName;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public static final fun classBuilder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public static final fun enumBuilder (Lio/outfoxx/swiftpoet/DeclaredTypeName;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public static final fun enumBuilder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAssociatedTypes ()Ljava/util/List;
	public final fun getDoc ()Lio/outfoxx/swiftpoet/CodeBlock;
	public final fun getEnumCases ()Ljava/util/List;
	public final fun getFunSpecs ()Ljava/util/List;
	public final fun getModifiers ()Ljava/util/Set;
	public final fun getPropertySpecs ()Ljava/util/List;
	public final fun getSuperTypes ()Ljava/util/Set;
	public fun getTypeSpecs ()Ljava/util/List;
	public final fun getTypeVariables ()Ljava/util/List;
	public fun hashCode ()I
	public final fun isEnum ()Z
	public static final fun protocolBuilder (Lio/outfoxx/swiftpoet/DeclaredTypeName;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public static final fun protocolBuilder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public static final fun structBuilder (Lio/outfoxx/swiftpoet/DeclaredTypeName;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public static final fun structBuilder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun toBuilder ()Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public fun toString ()Ljava/lang/String;
}

public final class io/outfoxx/swiftpoet/TypeSpec$Builder : io/outfoxx/swiftpoet/AttributedSpec$Builder {
	public final fun addAssociatedType (Lio/outfoxx/swiftpoet/TypeVariableName;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addDoc (Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addDoc (Ljava/lang/String;[Ljava/lang/Object;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addEnumCase (Lio/outfoxx/swiftpoet/EnumerationCaseSpec;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addEnumCase (Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addEnumCase (Ljava/lang/String;I)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addEnumCase (Ljava/lang/String;Lio/outfoxx/swiftpoet/CodeBlock;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addEnumCase (Ljava/lang/String;Lio/outfoxx/swiftpoet/TupleTypeName;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addEnumCase (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addEnumCase (Ljava/lang/String;Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addFunction (Lio/outfoxx/swiftpoet/FunctionSpec;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addFunctions (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addMutableProperty (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addProperties (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addProperty (Lio/outfoxx/swiftpoet/PropertySpec;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addProperty (Ljava/lang/String;Lio/outfoxx/swiftpoet/TypeName;[Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addSuperType (Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addSuperTypes (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addType (Lio/outfoxx/swiftpoet/AnyTypeSpec;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addTypeVariable (Lio/outfoxx/swiftpoet/TypeVariableName;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addTypeVariables (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun addTypes (Ljava/lang/Iterable;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun build ()Lio/outfoxx/swiftpoet/TypeSpec;
	public final fun constrainToClass ()Lio/outfoxx/swiftpoet/TypeSpec$Builder;
}

public final class io/outfoxx/swiftpoet/TypeSpec$Companion {
	public final fun actorBuilder (Lio/outfoxx/swiftpoet/DeclaredTypeName;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun actorBuilder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun classBuilder (Lio/outfoxx/swiftpoet/DeclaredTypeName;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun classBuilder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun enumBuilder (Lio/outfoxx/swiftpoet/DeclaredTypeName;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun enumBuilder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun protocolBuilder (Lio/outfoxx/swiftpoet/DeclaredTypeName;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun protocolBuilder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun structBuilder (Lio/outfoxx/swiftpoet/DeclaredTypeName;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
	public final fun structBuilder (Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeSpec$Builder;
}

public abstract class io/outfoxx/swiftpoet/TypeSpec$Kind {
	public synthetic fun <init> (Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public abstract fun plusModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/TypeSpec$Kind;
	public fun toString ()Ljava/lang/String;
}

public final class io/outfoxx/swiftpoet/TypeSpec$Kind$Actor : io/outfoxx/swiftpoet/TypeSpec$Kind {
	public fun <init> ([Lio/outfoxx/swiftpoet/Modifier;)V
	public fun plusModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/TypeSpec$Kind$Actor;
	public synthetic fun plusModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/TypeSpec$Kind;
}

public final class io/outfoxx/swiftpoet/TypeSpec$Kind$Class : io/outfoxx/swiftpoet/TypeSpec$Kind {
	public fun <init> ([Lio/outfoxx/swiftpoet/Modifier;)V
	public fun plusModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/TypeSpec$Kind$Class;
	public synthetic fun plusModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/TypeSpec$Kind;
}

public final class io/outfoxx/swiftpoet/TypeSpec$Kind$Enum : io/outfoxx/swiftpoet/TypeSpec$Kind {
	public fun <init> ([Lio/outfoxx/swiftpoet/Modifier;)V
	public fun plusModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/TypeSpec$Kind$Enum;
	public synthetic fun plusModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/TypeSpec$Kind;
}

public final class io/outfoxx/swiftpoet/TypeSpec$Kind$Protocol : io/outfoxx/swiftpoet/TypeSpec$Kind {
	public fun <init> ([Lio/outfoxx/swiftpoet/Modifier;)V
	public fun plusModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/TypeSpec$Kind$Protocol;
	public synthetic fun plusModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/TypeSpec$Kind;
}

public final class io/outfoxx/swiftpoet/TypeSpec$Kind$Struct : io/outfoxx/swiftpoet/TypeSpec$Kind {
	public fun <init> ([Lio/outfoxx/swiftpoet/Modifier;)V
	public fun plusModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/TypeSpec$Kind$Struct;
	public synthetic fun plusModifiers ([Lio/outfoxx/swiftpoet/Modifier;)Lio/outfoxx/swiftpoet/TypeSpec$Kind;
}

public final class io/outfoxx/swiftpoet/TypeVariableName : io/outfoxx/swiftpoet/TypeName {
	public static final field Companion Lio/outfoxx/swiftpoet/TypeVariableName$Companion;
	public synthetic fun <init> (Ljava/lang/String;Ljava/util/List;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static final fun get (Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeVariableName;
	public static final fun get (Ljava/lang/String;[Lio/outfoxx/swiftpoet/TypeVariableName$Bound;)Lio/outfoxx/swiftpoet/TypeVariableName;
	public final fun getBounds ()Ljava/util/List;
	public fun getName ()Ljava/lang/String;
	public final fun withBounds (Ljava/util/List;)Lio/outfoxx/swiftpoet/TypeVariableName;
	public final fun withBounds ([Lio/outfoxx/swiftpoet/TypeVariableName$Bound;)Lio/outfoxx/swiftpoet/TypeVariableName;
}

public final class io/outfoxx/swiftpoet/TypeVariableName$Bound {
	public fun <init> (Lio/outfoxx/swiftpoet/TypeName;)V
	public fun <init> (Lio/outfoxx/swiftpoet/TypeVariableName$Bound$Constraint;Ljava/lang/String;)V
	public fun <init> (Ljava/lang/String;)V
	public final fun getConstraint ()Lio/outfoxx/swiftpoet/TypeVariableName$Bound$Constraint;
	public final fun getType ()Lio/outfoxx/swiftpoet/TypeName;
}

public final class io/outfoxx/swiftpoet/TypeVariableName$Bound$Constraint : java/lang/Enum {
	public static final field CONFORMS_TO Lio/outfoxx/swiftpoet/TypeVariableName$Bound$Constraint;
	public static final field SAME_TYPE Lio/outfoxx/swiftpoet/TypeVariableName$Bound$Constraint;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeVariableName$Bound$Constraint;
	public static fun values ()[Lio/outfoxx/swiftpoet/TypeVariableName$Bound$Constraint;
}

public final class io/outfoxx/swiftpoet/TypeVariableName$Companion {
	public final fun bound (Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/TypeVariableName$Bound;
	public final fun bound (Lio/outfoxx/swiftpoet/TypeVariableName$Bound$Constraint;Lio/outfoxx/swiftpoet/TypeName;)Lio/outfoxx/swiftpoet/TypeVariableName$Bound;
	public final fun bound (Lio/outfoxx/swiftpoet/TypeVariableName$Bound$Constraint;Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeVariableName$Bound;
	public final fun bound (Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeVariableName$Bound;
	public final fun get (Ljava/lang/String;)Lio/outfoxx/swiftpoet/TypeVariableName;
	public final fun get (Ljava/lang/String;[Lio/outfoxx/swiftpoet/TypeVariableName$Bound;)Lio/outfoxx/swiftpoet/TypeVariableName;
	public final fun typeVariable (Ljava/lang/String;Ljava/util/List;)Lio/outfoxx/swiftpoet/TypeVariableName;
	public final fun typeVariable (Ljava/lang/String;[Lio/outfoxx/swiftpoet/TypeVariableName$Bound;)Lio/outfoxx/swiftpoet/TypeVariableName;
}

